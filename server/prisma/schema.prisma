generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  passwordHash String
  name         String?
  role         String        @default("user")
  tasks        Task[]
  meetings     Meeting[]
  helpRequests HelpRequest[]
  recipientDeadlines Deadline[] @relation("RecipientUser")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum TaskStatus {
  pending
  in_progress
  completed
}

model Task {
  id          Int          @id @default(autoincrement())
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  title       String
  description String?
  priority    String       @default("medium")
  dueDate     DateTime?
  status      TaskStatus   @default(pending)
  orderIndex  Int          @default(0)
  category    String?
  deadlines   Deadline[]
  subtasks    Subtask[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Meeting {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  title       String
  time        DateTime
  notes       String?
  transcriptUrl String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model HelpRequest {
  id              Int       @id @default(autoincrement())
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  type            String
  description     String
  urgency         String    @default("low")
  mood            Int?
  energy          Int?
  clientTimestamp DateTime?
  createdAt       DateTime  @default(now())
}

model Resource {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  category  String?
  createdAt DateTime @default(now())
}

model Deadline {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title     String?
  dueAt     DateTime
  recipientEmail String?
  recipientUserId Int?
  recipientUser   User?    @relation("RecipientUser", fields: [recipientUserId], references: [id])
  reminders DeadlineReminder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeadlineReminder {
  id            Int       @id @default(autoincrement())
  deadlineId    Int
  deadline      Deadline  @relation(fields: [deadlineId], references: [id], onDelete: Cascade)
  offsetMinutes Int       @default(60) // minutes before dueAt
  sentAt        DateTime?
  createdAt     DateTime  @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  subject   String
  body      String
  createdAt DateTime @default(now())
}

model Subtask {
  id         Int     @id @default(autoincrement())
  taskId     Int
  task       Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title      String
  done       Boolean @default(false)
  orderIndex Int     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
